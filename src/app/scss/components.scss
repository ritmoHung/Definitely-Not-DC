@import "colors.module";
@import "_mixins";
@import "_schemata";



/* ----------------------------- TILE ----------------------------- */
@mixin tile($theme) {
    color: map-get($theme, "text-color");
    background-color: map-get($theme, "bg-color");
    @if map-get($theme, "border-color") != null {
        border: map-get($theme, "border-color") 1px solid;
    }
    @if map-get($theme, "hover-border-color") != null {
        &:is(select) + svg {
            color: map-get($theme, "hover-border-color");
            @apply motion-safe:transition-all;
        }
    }

    &:is(a, button):hover {
        background-color: map-get($theme, "hover-bg-color");
    }
    &:is(a, button):active {
        // ! Changed to hover-bg-color
        @if map-get($theme, "hover-bg-color") != null {
            background-color: map-get($theme, "hover-bg-color");
        }
    }

    &[contenteditable="true"]:hover,
    &[contenteditable="true"]:focus-visible,
    &:is(select, input, textarea):hover,
    &:is(select, input, textarea):focus-visible {
        @if map-get($theme, "hover-border-color") != null {
            border: map-get($theme, "hover-border-color") 1px solid !important;
            & + svg {
                color: map-get($theme, "text-color");
            }
        }
    }
    &[contenteditable="true"]:focus-visible,
    &:is(select, input, textarea):focus-visible {
        @if map-get($theme, "hover-border-color") != null {
            outline: map-get($theme, "border-color") 2px solid !important;
        }
    }

    &[data-selected="false"] {
        color: color("zinc", 500);
    }
    &[data-selected="false"]:hover, &[data-selected="true"], &[data-selected="true"]:hover {
        @apply font-bold;
        color: map-get($theme, "text-color");
    }
    &[data-selected="true"], &[data-selected="true"]:hover {
        @if map-get($theme, "active-bg-color") != null {
            background-color: map-get($theme, "active-bg-color");
        }
    }

    &:not(input, textarea) {
        @apply motion-safe:transition-all;
    }
    &:is(input, textarea) {
        @apply motion-safe:transition-colors;
    }
}

.tile-rounded-gray {
    @include tile-props($rounded: true);
    color: color("zinc", 800);
    background: color("zinc", 300);
}
.tile-border-rounded-gray {
    @include tile-props($rounded: true);
    color: color("zinc", 800);
    border: color("zinc", 300) 1px solid;
    background-color: color("zinc", 50);
}
.tile-border-rounded-gray-sm {
    @include tile-props($size: "sm", $rounded: true);
    color: color("zinc", 800);
    border: color("zinc", 300) 1px solid;
    background-color: color("zinc", 50);
}

.tile-border-trans-inline {
    @include tile-props($size: "inline");
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-trans-xs {
    @include tile-props($size: "xs");
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-trans-sm {
    @include tile-props($size: "sm");
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-trans {
    @include tile-props;
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-trans-lg {
    @include tile-props($size: "lg");
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-trans-xl {
    @include tile-props($size: "xl");
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-border-trans-even-xs {
    @include tile-props($size: "xs", $even: true);
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-trans-even-sm {
    @include tile-props($size: "sm", $even: true);
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-trans-even {
    @include tile-props($even: true);
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-trans-even-lg {
    @include tile-props($size: "lg", $even: true);
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-trans-even-xl {
    @include tile-props($size: "xl", $even: true);
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-border-xs {
    @include tile-props($size: "xs");
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-sm {
    @include tile-props($size: "sm");
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border {
    @include tile-props();
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-lg {
    @include tile-props($size: "lg");
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-xl {
    @include tile-props($size: "xl");
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-rounded-trans-xs {
    @include tile-props($size: "xs", $rounded: true);
    @include customThemed($tile-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-trans-sm {
    @include tile-props($size: "sm", $rounded: true);
    @include customThemed($tile-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-trans {
    @include tile-props($rounded: true);
    @include customThemed($tile-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-trans-lg {
    @include tile-props($size: "lg", $rounded: true);
    @include customThemed($tile-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-trans-xl {
    @include tile-props($size: "xl", $rounded: true);
    @include customThemed($tile-trans-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-rounded-xs {
    @include tile-props($size: "xs", $rounded: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-sm {
    @include tile-props($size: "sm", $rounded: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded {
    @include tile-props($rounded: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-lg {
    @include tile-props($size: "lg", $rounded: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-xl {
    @include tile-props($size: "xl", $rounded: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-rounded-even-xs {
    @include tile-props($size: "xs", $rounded: true, $even: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-even-sm {
    @include tile-props($size: "sm", $rounded: true, $even: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-even {
    @include tile-props($rounded: true, $even: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-even-lg {
    @include tile-props($size: "lg", $rounded: true, $even: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-rounded-even-xl {
    @include tile-props($size: "xl", $rounded: true, $even: true);
    @include customThemed($tile-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-rounded-accent-inline {
    @include tile-props($size: "inline", $rounded: true);
    @include themed($tile-accent-schema) using ($theme) {
        @include tile($theme)
    }
}
.tile-rounded-accent-xs {
    @include tile-props($size: "xs", $rounded: true);
    @include themed($tile-accent-schema) using ($theme) {
        @include tile($theme)
    }
}
.tile-rounded-accent-sm {
    @include tile-props($size: "sm", $rounded: true);
    @include themed($tile-accent-schema) using ($theme) {
        @include tile($theme)
    }
}
.tile-rounded-accent {
    @include tile-props($rounded: true);
    @include themed($tile-accent-schema) using ($theme) {
        @include tile($theme)
    }
}
.tile-rounded-accent-lg {
    @include tile-props($size: "lg", $rounded: true);
    @include themed($tile-accent-schema) using ($theme) {
        @include tile($theme)
    }
}
.tile-rounded-accent-xl {
    @include tile-props($size: "xl", $rounded: true);
    @include themed($tile-accent-schema) using ($theme) {
        @include tile($theme)
    }
}

.tile-border-rounded-trans-sm {
    @include tile-props($size: "sm", $rounded: true);
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-trans {
    @include tile-props($rounded: true);
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-trans-lg {
    @include tile-props($size: "lg", $rounded: true);
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-trans-xl {
    @include tile-props($size: "xl", $rounded: true);
    @include customThemed($tile-border-trans-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-border-rounded-inline {
    @include tile-props($size: "inline", $rounded: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-xs {
    @include tile-props($size: "xs", $rounded: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-sm {
    @include tile-props($size: "sm", $rounded: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded {
    @include tile-props($rounded: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-lg {
    @include tile-props($size: "lg", $rounded: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-xl {
    @include tile-props($size: "xl", $rounded: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-border-rounded-even-xs {
    @include tile-props($size: "xs", $rounded: true, $even: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-even-sm {
    @include tile-props($size: "sm", $rounded: true, $even: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-even {
    @include tile-props($rounded: true, $even: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-even-lg {
    @include tile-props($size: "lg", $rounded: true, $even: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-even-xl {
    @include tile-props($size: "xl", $rounded: true, $even: true);
    @include customThemed($tile-border-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-border-rounded-accent-inline {
    @include tile-props($size: "inline", $rounded: true);
    @include themed($tile-border-accent-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-accent-xs {
    @include tile-props($size: "xs", $rounded: true);
    @include themed($tile-border-accent-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-accent-sm {
    @include tile-props($size: "sm", $rounded: true);
    @include themed($tile-border-accent-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-accent {
    @include tile-props($rounded: true);
    @include themed($tile-border-accent-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-accent-lg {
    @include tile-props($size: "lg", $rounded: true);
    @include themed($tile-border-accent-schema) using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-accent-xl {
    @include tile-props($size: "xl", $rounded: true);
    @include themed($tile-border-accent-schema) using ($theme) {
        @include tile($theme);
    }
}

.tile-border-rounded-green {
    @include tile-props($rounded: true);
    @include customThemed($tile-border-accent-schema, "green") using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-amber {
    @include tile-props($rounded: true);
    @include customThemed($tile-border-accent-schema, "amber") using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-red-xs {
    @include tile-props($size: "xs", $rounded: true);
    @include customThemed($tile-border-accent-schema, "red") using ($theme) {
        @include tile($theme);
    }
}
.tile-border-rounded-red {
    @include tile-props($rounded: true);
    @include customThemed($tile-border-accent-schema, "red") using ($theme) {
        @include tile($theme);
    }
}



/* ------------------------- INTERACTIVES ------------------------- */
@layer components {
    @mixin ia-props($size: "md") {
        @if $size == "sm" {
            @apply h-7 sm:h-8 px-2 rounded-md;
            &::not(input, textarea) {
                @apply text-300;
            }
        } @else if $size == "md" {
            @apply h-9 sm:h-10 px-3 rounded-lg;
            &::not(input, textarea) {
                @apply text-400;
            }
        } @else if $size == "lg" {
            @apply h-11 sm:h-12 px-4 rounded-xl;
            &::not(input, textarea) {
                @apply text-500;
            }
        } @else if $size == "xl" {
            @apply h-12 sm:h-14 px-5 rounded-xl;
            &::not(input, textarea) {
                @apply text-600;
            }
        }
    }

    // # Buttons
    @mixin btn-solid($theme) {
        color: map-get($theme, "text-color");
        background-color: map-get($theme, "bg-color");
        
        &:hover, &:focus-visible {
            color: map-get($theme, "hover-text-color");
            background-color: map-get($theme, "hover-bg-color");
        }
        &:focus-visible {
            outline-color: map-get($theme, "outline-color");
        }
        &:active {
            color: map-get($theme, "active-text-color");
            background-color: map-get($theme, "active-bg-color");
        }
        &:disabled {
            @apply opacity-50;
            color: map-get($theme, "disabled-text-color");
            background-color: map-get($theme, "disabled-bg-color");
        }
    }
    @mixin btn-outline($theme) {
        color: map-get($theme, "text-color");
        background-color: map-get($theme, "bg-color");
        border: map-get($theme, "border-color") 1px solid;
        
        &:hover, &:focus-visible {
            background-color: map-get($theme, "hover-bg-color");
        }
        &:focus-visible {
            outline-color: map-get($theme, "outline-color");
        }
        &:active {
            background-color: map-get($theme, "active-bg-color");
        }
        &:disabled {
            @apply opacity-50;
            background-color: map-get($theme, "disabled-bg-color");
        }
    }

    .btn {
        @apply inline-flex items-center justify-center gap-3;

        &[data-size="sm"] {
            @include ia-props($size: "sm");
        }
        &[data-size="md"] {
            @include ia-props($size: "md");
        }
        &[data-size="lg"] {
            @include ia-props($size: "lg");
        }
        &[data-size="xl"] {
            @include ia-props($size: "xl");
        }

        @apply motion-safe:transition-all;
    }
    .btn-trans {

    }
    .btn-solid {
        @include themed($btn-solid-accent-schema) using ($theme) {
            @include btn-solid($theme);
        }
    }
    .btn-outline {
        @include themed($btn-outline-accent-schema) using ($theme) {
            @include btn-outline($theme);
        }
    }

    // # Inputs
    .input-border-rounded {
        // General
        @apply text-300;
        &[data-valid="false"] {
            @include customThemed($tile-border-accent-schema, "red") using ($theme) {
                @include tile($theme);
            }
        }
        @include customThemed($tile-border-schema) using ($theme) {
            @include tile($theme);
        }

        // Sizing
        &[data-size="sm"] {
            @include ia-props($size: "sm");
        }
        &[data-size="md"] {
            @include ia-props($size: "md");
        }
        &[data-size="lg"] {
            @include ia-props($size: "lg");
        }
        &[data-size="xl"] {
            @include ia-props($size: "xl");
        }

        // Pseudo elements
        &::placeholder {
            @apply block;
        }
    }
}



/* ---------------------------- TOGGLE ---------------------------- */
@layer components {
    @mixin toggle-props($theme, $btn-height: 2rem) {
        $toggle-diameter: 0.75 * $btn-height;
        $btn-width: $btn-height + $toggle-diameter;
        $toggle-offset: ($btn-height - $toggle-diameter) / 2;
        $toggle-shadow-offset: 10px;
        $toggle-wider: $btn-width - 2 * $toggle-offset;
    
        display: inline-block;
        height: $btn-height;
    
        & input[type="checkbox"] {
            display: none;
        }
    
        & input[type="checkbox"]:checked + .slider {
            background-color: map-get($theme, "accent-color");
        }
    
        & input[type="checkbox"]:checked + .slider::after {
            transform: translateX($btn-width - $toggle-diameter - $toggle-offset);
            box-shadow: -$toggle-shadow-offset 0 4 * $toggle-shadow-offset rgba(0, 0, 0, 0.1);
        }
    
        & input[type="checkbox"]:active + .slider::after {
            width: $toggle-wider;
        }
    
        & input[type="checkbox"]:checked:active + .slider::after {
            transform: translateX($btn-width - $toggle-wider - $toggle-offset);
        }
    
        & > .slider {
            @apply transition-all duration-300;
            position: relative;
            display: inline-block;
            width: $btn-width;
            height: $btn-height;
            background-color: color("zinc", 400);
            border-radius: 100vw;
            cursor: pointer;
        
            &::after {
                @apply transition-all duration-300;
                content: "";
                position: absolute;
                display: inline-block;
                width: $toggle-diameter;
                height: $toggle-diameter;
                background-color: #FFF;
                border-radius: 100vw;
                top: $toggle-offset;
                transform: translateX($toggle-offset);
                box-shadow: $toggle-shadow-offset 0 4 * $toggle-shadow-offset rgba(0, 0, 0, 0.1);
            }
        }
    }

    .toggle-accent {
        @include themed($accent-schema) using ($theme) {
            &[data-size="sm"] {
                @include toggle-props($theme, 1.5rem);
            }
            &[data-size="md"] {
                @include toggle-props($theme);
            }
        }
    }
}



/* ---------------------------- LOADER ---------------------------- */
@layer components {
    .loader-helix {
        --uib-size: 2.75rem;
        @apply flex flex-col items-center justify-center;
        height: var(--uib-size);
        width: var(--uib-size);

        &[data-size="sm"] {
            --uib-size: 2rem;
        }

        @include themed($accent-schema) using ($theme) {
            $uib-color: map-get($theme, "accent-color");
            $uib-speed: 2.5s;

            $uib-a: $uib-speed / -2;
            $uib-b: $uib-speed / -6;
            
            .slice {
                position: relative;
                height: calc(var(--uib-size) / 6);
                width: 100%;
            }
            
            .slice::before,
            .slice::after {
                content: "";
                position: absolute;
                top: 0;
                left: calc(50% - var(--uib-size) / 12);
                height: 100%;
                width: calc(100% / 6);
                border-radius: 50%;
                background-color: $uib-color;
                flex-shrink: 0;
                animation: orbit $uib-speed linear infinite;
                transition: background-color 0.3s ease;
            }
            
              .slice:nth-child(1)::after {
                animation-delay: $uib-a;
              }
            
              .slice:nth-child(2)::before {
                animation-delay: $uib-b;
              }
            
              .slice:nth-child(2)::after {
                animation-delay: $uib-a + $uib-b;
              }
            
              .slice:nth-child(3)::before {
                animation-delay: $uib-b * 2;
              }
              .slice:nth-child(3)::after {
                animation-delay: $uib-a + $uib-b * 2;
              }
            
              .slice:nth-child(4)::before {
                animation-delay: $uib-b * 3;
              }
              .slice:nth-child(4)::after {
                animation-delay: $uib-a + $uib-b * 3;
              }
            
              .slice:nth-child(5)::before {
                animation-delay: $uib-b * 4;
              }
              .slice:nth-child(5)::after {
                animation-delay: $uib-a + $uib-b * 4;
              }
            
              .slice:nth-child(6)::before {
                animation-delay: $uib-b * 5;
              }
              .slice:nth-child(6)::after {
                animation-delay: $uib-a + $uib-b * 5;
              }
        }
        
    }

    @keyframes orbit {
        0% {
            transform: translateX(calc(var(--uib-size) * 0.25)) scale(0.73684);
            opacity: 0.65;
        }
        5% {
            transform: translateX(calc(var(--uib-size) * 0.235)) scale(0.684208);
            opacity: 0.58;
        }
        10% {
            transform: translateX(calc(var(--uib-size) * 0.182)) scale(0.631576);
            opacity: 0.51;
        }
        15% {
            transform: translateX(calc(var(--uib-size) * 0.129)) scale(0.578944);
            opacity: 0.44;
        }
        20% {
            transform: translateX(calc(var(--uib-size) * 0.076)) scale(0.526312);
            opacity: 0.37;
        }
        25% {
            transform: translateX(0%) scale(0.47368);
            opacity: 0.3;
        }
        30% {
            transform: translateX(calc(var(--uib-size) * -0.076)) scale(0.526312);
            opacity: 0.37;
        }
        35% {
            transform: translateX(calc(var(--uib-size) * -0.129)) scale(0.578944);
            opacity: 0.44;
        }
        40% {
            transform: translateX(calc(var(--uib-size) * -0.182)) scale(0.631576);
            opacity: 0.51;
        }
        45% {
            transform: translateX(calc(var(--uib-size) * -0.235)) scale(0.684208);
            opacity: 0.58;
        }
        50% {
            transform: translateX(calc(var(--uib-size) * -0.25)) scale(0.73684);
            opacity: 0.65;
        }
        55% {
            transform: translateX(calc(var(--uib-size) * -0.235)) scale(0.789472);
            opacity: 0.72;
        }
        60% {
            transform: translateX(calc(var(--uib-size) * -0.182)) scale(0.842104);
            opacity: 0.79;
        }
        65% {
            transform: translateX(calc(var(--uib-size) * -0.129)) scale(0.894736);
            opacity: 0.86;
        }
        70% {
            transform: translateX(calc(var(--uib-size) * -0.076)) scale(0.947368);
            opacity: 0.93;
        }
        75% {
            transform: translateX(0%) scale(1);
            opacity: 1;
        }
        80% {
            transform: translateX(calc(var(--uib-size) * 0.076)) scale(0.947368);
            opacity: 0.93;
        }
        85% {
            transform: translateX(calc(var(--uib-size) * 0.129)) scale(0.894736);
            opacity: 0.86;
        }
        90% {
            transform: translateX(calc(var(--uib-size) * 0.182)) scale(0.842104);
            opacity: 0.79;
        }
        95% {
            transform: translateX(calc(var(--uib-size) * 0.235)) scale(0.789472);
            opacity: 0.72;
        }
        100% {
            transform: translateX(calc(var(--uib-size) * 0.25)) scale(0.73684);
            opacity: 0.65;
        }
    }
}